	fileIO
main(){
	ifstream myfile_in;
	ofstream myfile_out;
	int arrSize = 20;
	int arr[arrSize];
	myfile_in.open(<file.txt>);
	if(myfile_in open){
		while(good){
			int i = 0;
			string line;
			getline(line <- myfile_in);
			arr[i] <- int = line;
			i++;
	}	}
	myfile_in.close();
	"Inset parameters: first, last";
	int first <- cin
	int last <- cin
	myfile_out.open(<out.txt>);
	for(i; arr[first] to array[last]){
		file << arr[i];
	}
	myfile_out.close();
}
---------------------------------------------------------------------------------------------	
	checkArray
int main(int arrMax, int arr[], int first, int last){
	if(first > last)
		return -10;
	else if(last > arrMax)
		return -20;
	inc = 1;
	dec = 1;
	for(each arr[i = 1]){
		if( arr[i] >= arr[i-1]
			dec = 0;
		if( arr[i] <= arr[i-1]
			inc = 0;
	}
	if( dec = 1)
		"Decreasing"
		return -1;
	else if(inc = 1)
		"Increasing"
		return 1;
	else
		"Unsorted"
		return 0;	
}
---------------------------------------------------------------------------------------------	
	searchArray
int binarySearch(int key, int arr[], int first, int last){
	int mid = (last - first)/2 + first 
	if (arr[mid] == k)
		return mid
	else if(arr[mid] > k){
		last = mid
	}	
	else if(arr[mid] < k{
		first = mid
	}
	









	return i;
}
main(){
	ifstream myfile_in;
	ofstream myfile_out;
	int arrSize = 20;
	int arr[arrSize];
	myfile_in.open(<file.txt>);
	if(myfile_in open){
		while(good){
			int i = 0;
			string line;
			getline(line <- myfile_in);
			arr[i] <- int = line;
			i++;
	}	}
	int sort = checkArraySearch(arrSize, arr[], first, last)
	if(sort == -20 || sort == -10 || sort == 0)
		"Error or unsorted";
	else
		"Inset parameters: first, last";
		int first <- cin
		int last <- cin
		"Enter search key";
		int key << cin;
		int index = binarySearch(sort, key, arr[], first, last);
		if( index = -1)
			"Fail"
		else
			"Found "key" at "index"."












}
