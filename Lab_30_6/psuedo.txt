	fileIO
main(){
	ifstream myfile_in;
	ofstream myfile_out;
	int arrSize = 0;
	string *arr;
	myfile_in.open(<file.txt>);
	if(myfile_in open){
		while(!eof)
			arrSize++;
		arr = arr[arrSize];
		while(good){
			int i = 0;
			string line;
			arr[i] <- myfile_in;
			i++;
	}	}
	myfile_in.close();
	myfile_out.open(<out.txt>);
	for(each arr[i]){
		file << arr[i];
	}
	myfile_out.close();
}
---------------------------------------------------------------------------------------------	
	checkArray
int checkArraySort(int arrMax, string arr[]){
	inc = 1;
	dec = 1;
	for(each arr[i = 1]){
		if( arr[i] >= arr[i-1]
			dec = 0;
		if( arr[i] <= arr[i-1]
			inc = 0;
	}
	if( dec = 1)
		"Decreasing"
		return -1;
	else if(inc = 1)
		"Increasing"
		return 1;
	else
		"Unsorted"
		return 0;	
}
main(){
	ifstream myfile_in;
	ofstream myfile_out;
	int arrSize = 0;
	string *arr;
	myfile_in.open(<file.txt>);
	if(myfile_in open){
		while(!eof)
			arrSize++;
		arr = arr[arrSize];
		while(good){
			int i = 0;
			string line;
			arr[i] <- myfile_in;
			i++;
	}	}
	myfile_in.close();
	checkArraySort(arr,arrSize);
}
---------------------------------------------------------------------------------------------	
	searchArray
int binarySearch(int sort, string key, string arr[], int arrMax){
	int first = 0;
	int last = arrMax;
	int mid = 0;
	while(sort == ascending){	
		mid = arr[(last - first)/2 + first]; 
		if (mid || first || last == k)
			return mid || first || last
		else if(mid > k && k > first){
			last = mid
		}	
		else if(mid < k && k < last){
			first = mid
		}
	}
	while(sort == descending){	
		mid = arr[(last - first)/2 + first]; 
		if (mid || first || last == k)
			return mid || first || last
		else if(mid < k && k < first){
			last = mid
		}	
		else if(mid > k && k > last){
			first = mid
		}
	}
}
int checkArraySort(string arrMax, int arr[]){
	inc = 1;
	dec = 1;
	for(each arr[i = 1]){
		if( arr[i] >= arr[i-1]
			dec = 0;
		if( arr[i] <= arr[i-1]
			inc = 0;
	}
	if( dec = 1)
		"Decreasing"
		return -1;
	else if(inc = 1)
		"Increasing"
		return 1;
	else
		"Unsorted"
		return 0;	
}
main(){
	ifstream myfile_in;
	ofstream myfile_out;
	int arrSize = 0;
	string *arr;
	myfile_in.open(<file.txt>);
	if(myfile_in open){
		while(!eof)
			arrSize++;
		arr = arr[arrSize];
		while(good){
			int i = 0;
			string line;
			arr[i] <- myfile_in;
			i++;
	}	}
	myfile_in.close();
	checkArraySort(arr,arrSize);
	if(sort == 0)
		"Error or unsorted";
	else
		"Enter search key";
		int key << cin;
		int index = binarySearch(sort, key, arr[], arrSize);
		if( index = -1)
			"Fail"
		else
			"Found "key" at "index"."

}
